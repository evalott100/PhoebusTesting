"""
The screen shutter.bob is manually created in phoebus. Motor control is generated by phoebus.
"""

import re
from dataclasses import dataclass
from enum import Enum
from typing import Callable, Dict, Tuple

from pvi.device import (
    LED,
    ButtonPanel,
    ComboBox,
    SignalRW,
    TextRead,
    TextWrite,
    WidgetType,
)
from softioc import builder

from phoebus_testing.pvi_wrapper import Pvi

NUMBER_OF_MOTORS = 8
NUMBER_OF_THERMOMETERS = 4


def generate_manual_motor_records():
    for motor_number in range(1, NUMBER_OF_MOTORS + 1):
        builder.longOut(f"MOTOR_{motor_number}:TWR")
        builder.longOut(f"MOTOR_{motor_number}:TWF")
        builder.longOut(f"MOTOR_{motor_number}:VAL")
        builder.longOut(f"MOTOR_{motor_number}:RBV")
        builder.boolOut(f"MOTOR_{motor_number}:STOP")
        builder.longOut(f"MOTOR_{motor_number}:LOLO")
        builder.longOut(f"MOTOR_{motor_number}:HIHI")
        builder.longOut(f"MOTOR_{motor_number}:TWV")


@dataclass
class WidgetRecord:
    name: str
    widget: WidgetType
    widget_kwargs: Dict
    record_creation_function: Callable
    record_creation_function_args: Tuple
    record_creation_function_kwargs: Dict


class MotorScreenGroup(Enum):
    STATUS = "Status"
    ELOSS = "Eloss"
    LIMIT_VIOLATION = "Limit Violation"
    KILL = "Kill"
    SYNC_VAL_RBV = "Sync Val RBV"
    COMMANDS = "Commands"
    CALIBRATION = "Calibration"
    RESOLUTION = "Resolution"
    MOTION = "Motion"
    OTHER = "Other"


MOTOR_WIDGET_RECORDS = [
    [
        WidgetRecord("Homed", LED, {}, builder.boolIn, (), {}),
        WidgetRecord("LowLimit", LED, {}, builder.boolIn, (), {}),
        WidgetRecord("CommsError", LED, {}, builder.boolIn, (), {}),
        WidgetRecord("GainSupport", LED, {}, builder.boolIn, (), {}),
        WidgetRecord("Moving", LED, {}, builder.boolIn, (), {}),
        WidgetRecord("Problem", LED, {}, builder.boolIn, (), {}),
        WidgetRecord("EncoderPresent", LED, {}, builder.boolIn, (), {}),
        WidgetRecord("AtHome", LED, {}, builder.boolIn, (), {}),
        WidgetRecord("FollowingError", LED, {}, builder.boolIn, (), {}),
        WidgetRecord("ClosedLoop", LED, {}, builder.boolIn, (), {}),
        WidgetRecord("Unused", LED, {}, builder.boolIn, (), {}),
        WidgetRecord("HomeLimit", LED, {}, builder.boolIn, (), {}),
        WidgetRecord("HighLimit", LED, {}, builder.boolIn, (), {}),
        WidgetRecord("Done", LED, {}, builder.boolIn, (), {}),
        WidgetRecord("DirectionPositive", LED, {}, builder.boolIn, (), {}),
    ],
    [
        WidgetRecord("SysFail", LED, {}, builder.boolIn, (), {}),
        WidgetRecord("AmplifierLoss", LED, {}, builder.boolIn, (), {}),
        WidgetRecord("EncoderLoss", LED, {}, builder.boolIn, (), {}),
        WidgetRecord("ElossClear", ButtonPanel, {}, builder.boolOut, (), {}),
    ],
    [
        WidgetRecord("UserHighLimit", TextWrite, {}, builder.aOut, (), {}),
        WidgetRecord("UserLowLimit", TextWrite, {}, builder.aOut, (), {}),
        WidgetRecord("DialHighLimit", TextWrite, {}, builder.aOut, (), {}),
        WidgetRecord("DialLowLimit", TextWrite, {}, builder.aOut, (), {}),
    ],
    [
        WidgetRecord("Kill", ButtonPanel, {}, builder.boolOut, (), {}),
    ],
    [WidgetRecord("SyncValRBV", ButtonPanel, {}, builder.boolOut, (), {})],
    [
        WidgetRecord("HomeForward", ButtonPanel, {}, builder.boolOut, (), {}),
        WidgetRecord("HomeReverse", ButtonPanel, {}, builder.boolOut, (), {}),
        WidgetRecord("JogForward", ButtonPanel, {}, builder.boolOut, (), {}),
        WidgetRecord("JogReverse", ButtonPanel, {}, builder.boolOut, (), {}),
        WidgetRecord("TweakForward", ButtonPanel, {}, builder.boolOut, (), {}),
        WidgetRecord("TweakReverse", ButtonPanel, {}, builder.boolOut, (), {}),
        WidgetRecord("TweakStep", TextWrite, {}, builder.aOut, (), {}),
    ],
    [
        WidgetRecord("Calibration", TextRead, {}, builder.aIn, (), {}),
        WidgetRecord(
            "Direction",
            ComboBox,
            {
                "choices": ["Neg", "Pos"],
            },
            builder.mbbOut,
            ("Neg", "Pos"),
            {},
        ),
        WidgetRecord("UserOffset", TextWrite, {}, builder.aOut, (), {}),
        WidgetRecord(
            "Set/Use",
            ComboBox,
            {
                "choices": ["Set", "Use"],
            },
            builder.mbbOut,
            ("Set", "Use"),
            {},
        ),
        WidgetRecord(
            "Offset",
            ComboBox,
            {
                "choices": ["Variable", "Fixed"],
            },
            builder.mbbOut,
            ("Variable", "Fixed"),
            {},
        ),
        WidgetRecord(
            "UseEncoder",
            ComboBox,
            {
                "choices": ["No", "Yes"],
            },
            builder.mbbOut,
            ("No", "Yes"),
            {},
        ),
    ],
    [
        WidgetRecord(
            "Resolution",
            ComboBox,
            {
                "choices": ["1", "10", "100"],
            },
            builder.mbbOut,
            ("1", "10", "100"),
            {},
        ),
        WidgetRecord(
            "MotorStepSize",
            TextWrite,
            {},
            builder.aOut,
            (),
            {},
        ),
        WidgetRecord(
            "StepsPerRev",
            TextRead,
            {},
            builder.aIn,
            (),
            {"EGU": "steps/r"},
        ),
        WidgetRecord(
            "EGUsPerRev",
            TextRead,
            {},
            builder.aIn,
            (),
            {"EGU": "mm/rev"},
        ),
        WidgetRecord(
            "EncodeStepSize",
            TextWrite,
            {},
            builder.aOut,
            (),
            {},
        ),
        WidgetRecord(
            "ReadBackStepSize",
            TextRead,
            {},
            builder.aIn,
            (),
            {"EGU": "mm"},
        ),
        WidgetRecord("UseEncoderIfPresent", TextRead, {}, builder.mbbIn, (), {}),
    ],
    [
        WidgetRecord("MaxVelocity", TextWrite, {}, builder.aOut, (), {}),
        WidgetRecord("BaseVelocity", TextWrite, {}, builder.aOut, (), {}),
        WidgetRecord("Velocity", TextWrite, {}, builder.aOut, (), {}),
        WidgetRecord("SecsToVelocity", TextWrite, {}, builder.aOut, (), {}),
        WidgetRecord("JVEL", TextWrite, {}, builder.aOut, (), {}),
        WidgetRecord("JogAcceleration", TextWrite, {}, builder.aOut, (), {}),
        WidgetRecord("BacklashDistance", TextWrite, {}, builder.aOut, (), {}),
        WidgetRecord("BacklashVelocity", TextWrite, {}, builder.aOut, (), {}),
        WidgetRecord("BacklashSecsToVelocity", TextWrite, {}, builder.aOut, (), {}),
        WidgetRecord("MoveFraction", TextWrite, {}, builder.aOut, (), {}),
        WidgetRecord("RetryDeadband", TextWrite, {}, builder.aOut, (), {}),
        WidgetRecord("MaxRetries", TextWrite, {}, builder.aOut, (), {}),
    ],
    [
        WidgetRecord("PREC", TextWrite, {}, builder.aOut, (), {}),
        WidgetRecord("EGU", TextWrite, {}, builder.aOut, (), {}),
    ],
]

MotorGroupToWidgetRecord = zip(MotorScreenGroup, MOTOR_WIDGET_RECORDS)


def name_to_pv(name: str):
    words = re.findall(r"[A-Z]?[a-z]+|[A-Z]{2,}(?=[A-Z][a-z]|\d|\W|$)|\d+", name)
    return "-".join(map(str.lower, words)).upper()


def generate_motor_settings_screen():
    for group, widget_records in MotorGroupToWidgetRecord:
        for widget_record in widget_records:
            widget_name_in_pv_format = name_to_pv(widget_record.name)
            for motor_number in range(1, NUMBER_OF_MOTORS + 1):
                pv_name = (
                    f"MOTOR_{motor_number}:{group.name}:{widget_name_in_pv_format}"
                )
                widget_record.record_creation_function(
                    pv_name,
                    *widget_record.record_creation_function_args,
                    **widget_record.record_creation_function_kwargs,
                )

            generic_pv_name = f"MOTOR_$(M):{group.name}:{widget_name_in_pv_format}"
            pv_name_no_number = f"MOTOR:{group.name}:{widget_name_in_pv_format}"
            component = SignalRW(
                widget_record.name,
                generic_pv_name,
                widget=widget_record.widget(**widget_record.widget_kwargs),
            )
            Pvi.add_pvi_info(pv_name_no_number, group, component)


def generate_manual_temperature_records():
    for thermometer_number in range(1, NUMBER_OF_THERMOMETERS + 1):
        builder.longOut(f"TEMP_{thermometer_number}:VAL", initial_value=22)


class TemperatureGroup(Enum):
    GENERAL = "General"


THERMOMETER_WIDGET_RECORDS = [
    [
        WidgetRecord(
            "CurrentTemp",
            TextRead,
            {},
            builder.aIn,
            (),
            {},
        ),
        WidgetRecord(
            "ErrorLevel",
            TextWrite,
            {},
            builder.aOut,
            (),
            {},
        ),
        WidgetRecord(
            "ErrorLevelRBV",
            TextWrite,
            {},
            builder.aIn,
            (),
            {},
        ),
        WidgetRecord("WarningLevel", TextWrite, {}, builder.aOut, (), {}),
    ]
]

TemperatureGroupToWidgetRecord = zip(TemperatureGroup, THERMOMETER_WIDGET_RECORDS)


def generate_temperature_settings_screen():
    for group, widget_records in TemperatureGroupToWidgetRecord:
        for widget_record in widget_records:
            widget_name_in_pv_format = name_to_pv(widget_record.name)
            for thermometer_number in range(1, NUMBER_OF_THERMOMETERS + 1):
                pv_name = (
                    f"TEMP_{thermometer_number}:{group.name}:{widget_name_in_pv_format}"
                )
                widget_record.record_creation_function(
                    pv_name,
                    *widget_record.record_creation_function_args,
                    **widget_record.record_creation_function_kwargs,
                )

            generic_pv_name = f"TEMP_$(T):{group.name}:{widget_name_in_pv_format}"
            pv_name_no_number = f"TEMP:{group.name}:{widget_name_in_pv_format}"
            component = SignalRW(
                widget_record.name,
                generic_pv_name,
                widget=widget_record.widget(**widget_record.widget_kwargs),
            )
            Pvi.add_pvi_info(pv_name_no_number, group, component)


def generate_shutter_screens():
    generate_manual_motor_records()
    generate_motor_settings_screen()
    generate_manual_temperature_records()
    generate_temperature_settings_screen()
